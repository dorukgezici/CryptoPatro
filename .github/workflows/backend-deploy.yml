name: Build & Deploy Dockerized Django to Amazon ECS
on: push
env:
  REPOSITORY: crypto-adiutor
jobs:
  deploy:
    name: Build & Deploy Django
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG backend/
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend/aws/ecs/task-definition.json
          container-name: api
          image: ${{ steps.build-image.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-scheduler
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-api.outputs.task-definition }}
          container-name: scheduler
          image: ${{ steps.build-image.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-worker
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-scheduler.outputs.task-definition }}
          container-name: worker
          image: ${{ steps.build-image.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-bot
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-worker.outputs.task-definition }}
          container-name: bot
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-bot.outputs.task-definition }}
          service: ${{ env.REPOSITORY }}
          cluster: ${{ env.REPOSITORY }}
          wait-for-service-stability: false
